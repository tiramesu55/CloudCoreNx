import { createAsyncThunk, createSlice,createEntityAdapter } from "@reduxjs/toolkit";
import {
getDashboardDetailsApi  
} from "./dashboardApi";

export interface IDashboardDetailsPartner {
    assocPharmacyId: number;
    assocPharmacyName: string;
  }
  export interface IDashboardContractedRX extends IDashboardDetailsPartner {
    contractedRx: number;
  }
  export interface IDashboardRXFilled extends IDashboardDetailsPartner {
    filledRx: number;
  } 
  export interface IDashboardAvailableRx extends IDashboardDetailsPartner {
    availableRx: number;
  }      
  export interface IDashboardDetails {
    pharmacyId: number;
    facilityId: number;
    association: {
      totalAssociatedPharmacies: number;
      assocPharmacies: IDashboardDetailsPartner[];
    };      
    contractedRx: {    
      totalContractedRxs: number;
      contractedRxs: IDashboardContractedRX[];
    };  
    filledRx: {
      totalRxsFilled: number;
      filledRxs: IDashboardRXFilled[];
    };
    availableRx: {
        totalAvailableRxs: number;
        availableRxs: IDashboardAvailableRx[];
      };
  }
  export interface IDashboardInfo {
      name: string;
      contractedRx: number;
      numberOfRxs?: number;
      availableRxs?: number;
  }  
  export interface IDashboardInfoList {
      data: IDashboardInfo[];
  }
  export interface DashboardState {
    config: IDashboardDetails;
    status: "idle" | "loading" | "failed" | "error";
  }

interface DashboardAction{
    data : IDashboardDetails;
    type: string;
  }
  const dashboardAdapter = createEntityAdapter<IDashboardDetails>({
    sortComparer: (a, b) => a.pharmacyId.toString().localeCompare(b.pharmacyId.toString()),
  });

  const initialState= dashboardAdapter.getInitialState<DashboardState>(
    {
    config:
    { 
    facilityId:0,
    pharmacyId:0,
    association:
    {
        totalAssociatedPharmacies:0,
        assocPharmacies:[
          {
            assocPharmacyId:0,
            assocPharmacyName:""
          }
        ]
    },
    availableRx:
    {
        totalAvailableRxs:0,
        availableRxs:[
          {
            assocPharmacyId:0,
            assocPharmacyName:"",
            availableRx:0
          }
        ]
    },
    contractedRx:
    {
        totalContractedRxs:0,
        contractedRxs:[
          {
            assocPharmacyId:0,
            assocPharmacyName:"",
            contractedRx:0
          }
        ]
    },
    filledRx:
    {
        totalRxsFilled:0,
        filledRxs:[
          {
            assocPharmacyId:0,
            assocPharmacyName:"",
            filledRx:0
          }
        ]
    },
    },
    status: 'idle'
})

export const getDashboardDetails = createAsyncThunk<DashboardAction, any >(
    "dashboard/get",
    async ({ url,params,token } : {url: string,params:string, token: string}) => {
      if(!token)
      return {data: null, type: "get"}
      const response = await getDashboardDetailsApi(url,params,token);
      // The value we return becomes the `fulfilled` action payload
      return {
        data: response.data,
        type: "get",
      };
    }
    );

    export const DashboardSlice = createSlice({
     name: "dashboard",
     initialState,
     reducers: {
      },
      // The `extraReducers` field lets the slice handle actions defined elsewhere,
      // including actions generated by createAsyncThunk or in other slices.
      extraReducers: (builder) => {
        builder
          .addCase(getDashboardDetails.pending, (state) => {
            state.status = "loading";
          })
          .addCase(getDashboardDetails.fulfilled, (state, action) => {
            state.status = "idle";
            state.config = action.payload.data
    
          })
          .addCase(getDashboardDetails.rejected, (state) => {
            state.status = "failed";
          })    
      },
    });

    export const DashboardReducer = DashboardSlice.reducer;